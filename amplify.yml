version: 1
env:
  variables:
    # Application versions
    DART_SASS_VERSION: 1.91.0
    GO_VERSION: 1.25.1
    HUGO_VERSION: 0.150.0
    # Time zone
    TZ: Europe/London
    # Cache
    HUGO_CACHEDIR: ${PWD}/.hugo
    NPM_CONFIG_CACHE: ${PWD}/.npm
frontend:
  phases:
    preBuild:
      commands:
        # Create directory for user-specific executable files
        - echo "Creating directory for user-specific executable files..."
        - mkdir -p "${HOME}/.local"

        # Install Dart Sass
        - echo "Installing Dart Sass ${DART_SASS_VERSION}..."
        - curl -sLJO "https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
        - tar -C "${HOME}/.local" -xf "dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
        - rm "dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
        - export PATH="${HOME}/.local/dart-sass:${PATH}"

        # Install Go
        - echo "Installing Go ${GO_VERSION}..."
        - curl -sLJO "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz"
        - tar -C "${HOME}/.local" -xf "go${GO_VERSION}.linux-amd64.tar.gz"
        - rm "go${GO_VERSION}.linux-amd64.tar.gz"
        - export PATH="${HOME}/.local/go/bin:${PATH}"

        # Install Hugo
        - echo "Installing Hugo ${HUGO_VERSION}..."
        - curl -sLJO "https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
        - mkdir "${HOME}/.local/hugo"
        - tar -C "${HOME}/.local/hugo" -xf "hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
        - rm "hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz"
        - export PATH="${HOME}/.local/hugo:${PATH}"

        # Verify installations
        - echo "Verifying installations..."
        - "echo Dart Sass: $(sass --version)"
        - "echo Go: $(go version)"
        - "echo Hugo: $(hugo version)"
        - "echo Node.js: $(node --version)"

        # Install Node.js dependencies
        - echo "Installing Node.js dependencies..."
        - "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci --prefer-offline || true"

        # Configure Git
        - echo "Configuring Git..."
        - git config core.quotepath false
    build:
      commands:
        - echo "Building site..."
        - hugo --gc --minify
  artifacts:
    baseDirectory: public
    files:
      - '**/*'
  cache:
    paths:
      - ${HUGO_CACHEDIR}/**/*
      - ${NPM_CONFIG_CACHE}/**/*
